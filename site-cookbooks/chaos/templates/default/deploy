#!/bin/bash

app=$1

DEPLOY_USER=git                              # User used to deploy the app
DEPLOY_GROUP=deploy                          # Shared group for file access
STARTER_PATH=/srv/git/bin/starter            # Script to start the app
BUILD_DIR=/tmp/$app                          # Where app's build is stored
GIT_REPO=~/repositories/${app}.git           # Where git bare repo are stored
APP_HOME=/srv/app/$app                       # Where apps are stored
CACHE_DIR=$APP_HOME/cache                    # Where app's cache dir is stored
PACKAGES_DIR=$APP_HOME/packages              # Where app's packaged version are stored
CONFIG_DIR=$APP_HOME/config                  # Where app's env files are stored
BUILDPACKS_DIR=/srv/git/buildpacks           # Where buildpack are stored
ADDONS_DIR=/srv/git/addons                   # Where addons scripts are stored

# Trap errors
error(){
  local script="$0"
  local line="$1"
  local exit_code="$2"
  echo "${script}: line ${line}: exit with status code (${exit_code})"
  exit $exit_code
}
trap 'error ${LINENO} ${$?}' ERR

# Create the app build dir.
# Clone a fresh copy of the app sources.
create_build_dir(){
  if [ -d "$BUILD_DIR" ]; then
    rm -rf $BUILD_DIR
  fi
  git clone $GIT_REPO $BUILD_DIR &> /dev/null
  rm -rf $BUILD_DIR/.git
  rm -f $BUILD_DIR/.gitignore
  rm -f $BUILD_DIR/.rbenv-version

  if [ ! -d "$BUILD_DIR" ]; then
    echo "The build directory cannot be created"
    error $LINENO 1
  fi
}

# Destroy the app build dir.
destroy_build_dir(){
  rm -rf $BUILD_DIR
}

# Find the build version number.
# Set the `build_version` var.
find_next_version_number(){
  build_number=$(( $(ls $PACKAGES_DIR | grep "^v[0-9]*" | wc -l)+1 ))
  while ls "${PACKAGES_DIR}/v${build_number}" &> /dev/null; do
    build_number=$(( $build_number+1 ))
  done
  build_version="v${build_number}"

  if [ "$build_number" == "" ]; then
    echo "No build version can be found."
    error $LINENO 1
  fi
}

# Detect a compatible buildpack.
# Start buildpack/bin/detect in each buildpacks and stop at first compatible.
detect_buildpack(){
  create_build_dir
  for folder in $BUILDPACKS_DIR/*; do
    if [ -d $folder ]; then
      if [ -f ${folder}/bin/detect ]; then
        local detected=$(${folder}/bin/detect $BUILD_DIR)
        if [[ $? == 0 ]]; then
          buildpack_name=$detected
          buildpack=$(basename $folder)
        fi
      fi
    fi
  done

  if [ "$buildpack" == "" ] || [ "$buildpack_name" == "" ]; then
    echo "No buildpack found for this application (or the buildpack has not printed any framework name)"
    error $LINENO 1
  fi
}

# Build the app package.
# Run buildpack and set permissions to be able to start the app.
build_app(){
  package_dir=$PACKAGES_DIR/$build_version
  ${BUILDPACKS_DIR}/${buildpack}/bin/compile $BUILD_DIR $CACHE_DIR
  buildpack_metadata=$(${BUILDPACKS_DIR}/${buildpack}/bin/release $BUILD_DIR)

  local exit_code=$?
  if [[ $exit_code != 0 ]]; then
    echo "Buildpack compilation failed"
    error $LINENO $exit_code
  fi

  cp -r $BUILD_DIR $package_dir
  chown -R $DEPLOY_USER:$DEPLOY_GROUP $package_dir
  chmod -R 775 $package_dir
  destroy_build_dir
}

# Search for an addon plan provider in the addons direcory.
#
# Arguments:
#   addon: addon plan to find a provider for (ex: chaos-postgresql:basic)
find_addon(){
  local addon=$1
  for addon_path in ${ADDONS_DIR}/*; do
    if [ -f ${addon_path}/detect ]; then
      detected=$(${addon_path}/detect $addon)
      if [[ $? == 0 ]]; then
        addon_provider="${addon_path}/gateway provide"
        addon_name=$(basename $addon_path)
        return 0
      fi
    fi
  done
  return 1
}

# Extract addons from buildpack metadata and try to add them to the app.
# Write env vars returning by the addon provider into the app config dir.
get_addons(){
  addons=$(echo "$buildpack_metadata" | ruby -e "require 'yaml'; data=YAML.load(STDIN.read); puts data['addons'].join(\"\\n\")")
  for addon_plan in "$addons" ; do
    echo -n "       Asking for ${addon_plan} "
    if find_addon $addon_plan; then
      local addon_env=$($addon_provider $app $addon_plan)
      echo $addon_env > "${CONFIG_DIR}/${addon_plan}" && chown $DEPLOY_USER:$DEPLOY_GROUP ${CONFIG_DIR}/${addon_plan} && chmod 660 ${CONFIG_DIR}/${addon_plan}
      echo "(added)"
    else
      echo "(not found)"
    fi
  done
}

# Start the app.
# Run app processes stored in the Procfile.
start_app(){
  cd $package_dir
  sudo -u $app HOME=$package_dir $STARTER_PATH
  sleep 1
}

# Update NGINX route
update_route(){
  local backends=( )
  domain=$(cat $APP_HOME/.domain)
  while read port; do
    backends=( "${backends[@]}" "127.0.0.1:${port}" )
  done < "$package_dir/tmp/ports"
  if (( ${#backends[@]} > 0 )); then
    hermes update $app $domain --upstream "${backends[@]}" --vhost-dir /srv/git/routes > /dev/null
  fi
}

# Stop old running version and update the current link to 
# the running package dir.
update_running_version(){
  if [ -f $PACKAGES_DIR/current/tmp/pids/starter.pid ]; then
    sudo -u $app kill `cat $PACKAGES_DIR/current/tmp/pids/starter.pid` &> /dev/null
  fi
  rm -f $PACKAGES_DIR/current
  ln -s $package_dir $PACKAGES_DIR/current
}

echo ""
find_next_version_number
echo "-----> Deploying $app ($build_version)"
detect_buildpack
echo "-----> Building app ($buildpack_name app detected)..."
build_app
if [ "$build_version" == "v1" ]; then
  echo "-----> Get buildpack addons..."
  get_addons
fi
echo "-----> Lauching..."
start_app
update_route
update_running_version
echo "-----> Application $app ($build_version) deployed."
echo "       http://${domain}"
echo ""
